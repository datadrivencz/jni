/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cz.datadriven.jni;

import com.google.common.base.Preconditions;
import org.checkerframework.checker.nullness.qual.Nullable;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class Test {

  public static void main(String[] args) {
    if (args.length < 1) {
      usage();
    }
    int iterations = Integer.parseInt(args[0]);
    run(new MapTestable(), new JniTestable(), iterations);
  }

  private static void run(Testable base, Testable other, int iterations) {
    test(base, iterations);
    test(other, iterations);
  }

  private static void test(Testable what, int iterations) {
    String key = UUID.randomUUID().toString();
    String value = UUID.randomUUID().toString();
    long now = System.currentTimeMillis();
    for (int step = 0; step < 5; step++) {
      for (int i = 0; i < iterations; i++) {
        String thisKey = key + i;
        String thisValue = value + i;
        what.get(thisKey);
        what.put(thisKey, thisValue);
        Preconditions.checkState(thisValue.equals(what.get(thisKey)));
      }
    }
    long diff = System.currentTimeMillis() - now;
    System.out.printf("Result of %s: %d\n", what.getClass().getSimpleName(), diff);
  }

  private static void usage() {
    System.err.printf("Usage: %s <iterations>\n", Test.class.getSimpleName());
    System.exit(1);
  }
}

interface Testable {
  @Nullable String get(String key);
  void put(String key, String value);
}

class MapTestable implements Testable {

  private final Map<String, byte[]> map = new HashMap<>();
  private volatile Object placeholder;

  @Override
  public @Nullable String get(String key) {
    // to emulate what JNI does
    placeholder = key.getBytes(StandardCharsets.UTF_8);
    byte[] bytes = map.get(key);
    if (bytes != null) {
      return new String(bytes, StandardCharsets.UTF_8);
    }
    return null;
  }

  @Override
  public void put(String key, String value) {
    // to emulate what JNI does
    placeholder = key.getBytes(StandardCharsets.UTF_8);
    map.put(key, value.getBytes(StandardCharsets.UTF_8));
  }
}

class JniTestable extends JniBase implements Testable {

  @Override
  public String get(String key) {
    byte[] bytes = key.getBytes(StandardCharsets.UTF_8);
    byte[] value = jniGet(bytes, bytes.length);
    if (value != null) {
      return new String(value, StandardCharsets.UTF_8);
    }
    return null;
  }

  @Override
  public void put(String key, String value) {
    byte[] keyBytes = key.getBytes(StandardCharsets.UTF_8);
    jniPut(keyBytes, keyBytes.length, value.getBytes(StandardCharsets.UTF_8));
  }

}